<?php

namespace iseeyoucopy\phpmvc\models;

use iseeyoucopy\phpmvc\Application;
use iseeyoucopy\phpmvc\UserModel;

/**
 * Class User
 *
 * @author iseeyoucopy
 * @package iseeyoucopy\phpmvc\models
 */
class User extends UserModel
{
    public int $id = 0;
    public ?int $role_id;
    public string $firstname = '';
    public string $lastname = '';
    public string $email = '';
    public string $password = '';
    public string $passwordConfirm = '';
    public ?string $ip_address = null;
    public ?string $user_agent = null;
    public string $date_created = '';
    public string $status = '';
    public string $last_login = '';
    public string $last_access = '';
    public string $image = '';
    public string $authtoken = '';
    public ?string $username = 'Unknown';

    public array $cart = [];

    public static function tableName(): string
    {
        return 'users';
    }

    public function attributes(): array
    {
        return [
            'firstname',
            'lastname',
            'email',
            'password',
            'image',
            'last_access',
            'status',
            'authtoken',
            'ip_address',
            'user_agent',
            'last_login',
            'role_id'
        ];
    }

    public function labels(): array
    {
        return [
            'firstname' => 'First name',
            'lastname' => 'Last name',
            'email' => 'Email',
            'password' => 'Password',
            'passwordConfirm' => 'Password Confirm'
        ];
    }
    public function rules(): array
    {
        return [
            'firstname' => [self::RULE_REQUIRED],
            'lastname' => [self::RULE_REQUIRED],
            'email' => [self::RULE_REQUIRED, self::RULE_EMAIL, [
                self::RULE_UNIQUE, 'class' => self::class
            ]],
            'password' => [self::RULE_REQUIRED, [self::RULE_MIN, 'min' => 8]],
            'passwordConfirm' => [[self::RULE_MATCH, 'match' => 'password']],
        ];
    }

    public function save()
    {
        $this->password = password_hash($this->password, PASSWORD_DEFAULT);
        $this->last_access = date('Y-m-d H:i:s');
        // Login successful, update IP address and user agent, and save the user
        $this->ip_address = self::getUserIP();
        $this->user_agent = self::getUserAgent();
        return parent::save();
    }

    public function update()
    {
        $this->last_login = date('Y-m-d H:i:s');
        $this->last_access = date('Y-m-d H:i:s');
        // Login successful, update IP address and user agent, and save the user
        $this->ip_address = self::getUserIP();
        $this->user_agent = self::getUserAgent();;
        return parent::update(); // TODO: Change the autogenerated stub
    }

    public function getDisplayName(): string
    {
        return htmlspecialchars($this->firstname . ' ' . $this->lastname);
    }

    public function getDisplayEmail(): string
    {
        return htmlspecialchars($this->email);
    }

// User.php

// ... Your existing code ...

    public function addToCart($product_id)
    {
        // Check if the product already exists in the cart
        if (isset($this->cart[$product_id])) {
            // If it exists, increment the quantity
            $this->cart[$product_id]++;
        } else {
            // If it doesn't exist, add it to the cart with quantity 1
            $this->cart[$product_id] = 1;
        }
    }

    public function removeFromCart($product_id)
    {
        // Check if the product exists in the cart
        if (isset($this->cart[$product_id])) {
            // If it exists, decrement the quantity
            $this->cart[$product_id]--;
            // If the quantity becomes zero, remove the product from the cart
            if ($this->cart[$product_id] <= 0) {
                unset($this->cart[$product_id]);
            }
        }
    }
    private function getDefaultUserRole()
    {
        $db = Application::$app->db;
        $statement = $db->prepare("SELECT id FROM roles WHERE name = 'User'");
        $statement->execute();
        return $statement->fetchColumn();  // Fetch the role_id for "User"
    }

}